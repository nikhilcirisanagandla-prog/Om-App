import React, { useState, useEffect } from 'react';
import { View, Text, StyleSheet, ScrollView, Alert, Switch } from 'react-native';
import { TextInput, Button } from 'react-native-paper';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useAuth } from '../components/AuthContext';

const ProfileScreen = ({ streak, updateStreak }) => {
  const [profile, setProfile] = useState({});
  const [editing, setEditing] = useState(false);
  const [notifications, setNotifications] = useState(true);
  const { logout } = useAuth();

  useEffect(() => {
    loadProfile();
    loadSettings();
  }, []);

  const loadProfile = async () => {
    try {
      const data = await AsyncStorage.getItem('profileData');
      if (data) {
        setProfile(JSON.parse(data));
      }
    } catch (error) {
      console.error('Error loading profile:', error);
    }
  };

  const loadSettings = async () => {
    try {
      const settings = await AsyncStorage.getItem('userSettings');
      if (settings) {
        const parsedSettings = JSON.parse(settings);
        setNotifications(parsedSettings.notifications ?? true);
      }
    } catch (error) {
      console.error('Error loading settings:', error);
    }
  };

  const saveProfile = async () => {
    try {
      await AsyncStorage.setItem('profileData', JSON.stringify(profile));
      setEditing(false);
      Alert.alert('Success', 'Profile updated successfully');
      updateStreak(); // Count profile update as activity
    } catch (error) {
      Alert.alert('Error', 'Could not save profile');
    }
  };

  const saveSettings = async () => {
    try {
      await AsyncStorage.setItem('userSettings', JSON.stringify({
        notifications
      }));
      Alert.alert('Success', 'Settings saved');
    } catch (error) {
      Alert.alert('Error', 'Could not save settings');
    }
  };

  const handleLogout = async () => {
    Alert.alert(
      'Logout',
      'Are you sure you want to logout?',
      [
        { text: 'Cancel', style: 'cancel' },
        { 
          text: 'Logout', 
          style: 'destructive',
          onPress: async () => {
            await logout();
          }
        }
      ]
    );
  };

  const questions = [
    { id: 'howFound', label: 'How did you find out about Om?' },
    { id: 'religion', label: 'What is your religion?' },
    { id: 'goals', label: 'What are your spiritual goals?' },
    { id: 'age', label: 'How old are you?' },
    { id: 'familySize', label: 'Number of people in your family?' },
    { id: 'hinduKnowledge', label: 'Do you have any previous knowledge on Hinduism?' },
  ];

  const getStreakText = (count) => {
    return count === 1 ? `${count} day` : `${count} days`;
  };

  return (
    <ScrollView style={styles.container} contentContainerStyle={styles.content}>
      <View style={styles.header}>
        <Text style={styles.title}>Your Spiritual Profile</Text>
        <Text style={styles.subtitle}>Personalize your journey with divine wisdom</Text>
      </View>

      {/* Streak Display */}
      <View style={styles.streakCard}>
        <Text style={styles.streakTitle}>Your Spiritual Journey</Text>
        <Text style={styles.streakCount}>
          {getStreakText(streak)} {streak > 0 && 'üî•'}
        </Text>
        <Text style={styles.streakMessage}>
          {streak === 0 ? 'Begin your journey today!' : 
           streak < 7 ? 'Keep up your spiritual practice!' : 
           'You are on an enlightened path!'}
        </Text>
      </View>

      {/* Profile Information */}
      <View style={styles.section}>
        <View style={styles.sectionHeader}>
          <Text style={styles.sectionTitle}>Your Information</Text>
          <Button 
            mode="text" 
            onPress={() => setEditing(!editing)}
            labelStyle={styles.editButton}
          >
            {editing ? 'Cancel' : 'Edit'}
          </Button>
        </View>

        {questions.map((q) => (
          <View key={q.id} style={styles.infoItem}>
            <Text style={styles.infoLabel}>{q.label}</Text>
            {editing ? (
              <TextInput
                value={profile[q.id]?.toString() || ''}
                onChangeText={(val) => setProfile({ ...profile, [q.id]: val })}
                mode="outlined"
                style={styles.editInput}
              />
            ) : (
              <Text style={styles.infoValue}>{profile[q.id] || 'Not set'}</Text>
            )}
          </View>
        ))}

        {editing && (
          <Button 
            mode="contained" 
            onPress={saveProfile}
            style={styles.saveButton}
          >
            Save Changes
          </Button>
        )}
      </View>

      {/* Settings */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>App Settings</Text>
        
        <View style={styles.settingItem}>
          <View style={styles.settingText}>
            <Text style={styles.settingLabel}>Daily Notifications</Text>
            <Text style={styles.settingDescription}>
              Receive daily verses and reminders
            </Text>
          </View>
          <Switch
            value={notifications}
            onValueChange={setNotifications}
            thumbColor={notifications ? '#FF9800' : '#f4f3f4'}
            trackColor={{ false: '#767577', true: '#FFE0B2' }}
          />
        </View>

        <Button 
          mode="outlined" 
          onPress={saveSettings}
          style={styles.settingsButton}
        >
          Save Settings
        </Button>
      </View>

      {/* Account Actions */}
      <View style={styles.section}>
        <Text style={styles.sectionTitle}>Account</Text>
        
        <Button 
          mode="outlined" 
          onPress={() => Alert.alert('Coming soon', 'Password change feature will be added soon')}
          style={styles.accountButton}
        >
          Change Password
        </Button>
        
        <Button 
          mode="contained" 
          onPress={handleLogout}
          style={styles.logoutButton}
          labelStyle={styles.logoutLabel}
        >
          Logout
        </Button>
      </View>

      <Text style={styles.footer}>
        May your profile reflect your true spiritual essence. ‡•ê
      </Text>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#FFF3E0',
  },
  content: {
    padding: 20,
    paddingBottom: 40,
  },
  header: {
    alignItems: 'center',
    marginBottom: 30,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FF9800',
    marginBottom: 5,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
  },
  streakCard: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 15,
    alignItems: 'center',
    marginBottom: 30,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 6,
    elevation: 3,
  },
  streakTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 10,
  },
  streakCount: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#FF9800',
    marginBottom: 5,
  },
  streakMessage: {
    fontSize: 14,
    color: '#666',
    fontStyle: 'italic',
    textAlign: 'center',
  },
  section: {
    backgroundColor: 'white',
    padding: 20,
    borderRadius: 15,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 6,
    elevation: 3,
  },
  sectionHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 20,  // <- Fixed: Added trailing comma for consistency (optional but prevents parsing issues)
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 15,
  },
  editButton: {
    color: '#FF9800',
    fontSize: 14,
  },
  infoItem: {
    marginBottom: 15,
  },
  infoLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 5,
  },
  infoValue: {
    fontSize: 14,
    color: '#666',
    padding: 10,
    backgroundColor: '#F5F5F5',
    borderRadius: 5,
  },
  editInput: {
    backgroundColor: '#F5F5F5',
  },
  saveButton: {
    marginTop: 10,
    backgroundColor: '#FF9800',
  },
  settingItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#E0E0E0',
  },
  settingText: {
    flex: 1,
  },
  settingLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: